name: Publish to NuGet

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  publish:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Validate csproj Version
        shell: pwsh
        run: |
          $VERSION = "${{ github.ref_name }}".TrimStart("v")
          $CSPROJ_PATH = "./src/DeepComparer/DeepComparer.csproj"
          $CSPROJ_VERSION = Select-String -Path $CSPROJ_PATH -Pattern '<Version>(.*?)</Version>' | ForEach-Object { $_.Matches[0].Groups[1].Value }
          if (-not $CSPROJ_VERSION) { Write-Error "No <Version> tag found."; exit 1 }
          if ($CSPROJ_VERSION -ne $VERSION) { Write-Error "Version mismatch!"; exit 1 }

      - name: Check package icon exists
        shell: pwsh
        run: |
          $iconPath = "src/DeepComparer/logo.png"
          if (!(Test-Path $iconPath)) { Write-Error "Icon not found at $iconPath"; exit 1 }
          $size = (Get-Item $iconPath).Length
          if ($size -gt 1MB) { Write-Error "Icon exceeds 1 MB: $size"; exit 1 }

      - name: Restore Dependencies
        run: dotnet restore ./src/DeepComparer.sln

      - name: Build Project
        run: dotnet build ./src/DeepComparer.sln --configuration Release --no-restore

      - name: Create artifacts directory
        run: mkdir artifacts

      - name: Pack NuGet Package
        run: dotnet pack ./src/DeepComparer/DeepComparer.csproj --configuration Release --output ./artifacts

      - name: Verify Package Exists
        shell: pwsh
        run: |
          $pkg = Get-ChildItem ./artifacts/*.nupkg -ErrorAction SilentlyContinue
          if (-not $pkg) { Write-Error "No NuGet package found."; exit 1 }
          Write-Host "Found package: $($pkg.FullName)"

      - name: Verify icon inside NuGet package
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $pkg = Get-ChildItem ./artifacts/*.nupkg | Select-Object -First 1
          $zip = [System.IO.Compression.ZipFile]::OpenRead($pkg.FullName)
          $entry = $zip.Entries | Where-Object { $_.FullName -eq "logo.png" }
          if (-not $entry) { Write-Error "Icon not found in package."; $zip.Dispose(); exit 1 }
          $zip.Dispose()

      - name: Publish to NuGet
        shell: pwsh
        run: |
          $pkg = Get-ChildItem ./artifacts/*.nupkg | Select-Object -First 1
          dotnet nuget push $pkg.FullName --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
